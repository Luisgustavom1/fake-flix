import { Inject, Injectable } from '@nestjs/common';
import { Video } from '@contentModule/persistence/entity/video.entity';
import { VideoSummaryGeneratorAdapter } from '../adapter/video-summary-generator.adapter.interface';
import { VideoTranscriptGeneratorAdapter } from '../adapter/video-transcript-generator.adapter.interface';
import { VideoAgeRecommendationAdapter } from '../adapter/video-recommendation.adapter.interface';
import { VideoMetadata } from '@contentModule/persistence/entity/video-metadata.entity';

export interface CreateMovieData {
  title: string;
  description: string;
  videoUrl: string;
  sizeInKb: number;
  thumbnailUrl?: string;
}

@Injectable()
export class VideoProcessorService {
  constructor(
    @Inject(VideoSummaryGeneratorAdapter)
    private readonly videoSummaryGenerator: VideoSummaryGeneratorAdapter,
    @Inject(VideoTranscriptGeneratorAdapter)
    private readonly videoTranscriptGenerator: VideoTranscriptGeneratorAdapter,
    @Inject(VideoAgeRecommendationAdapter)
    private readonly videoAgeRecommendation: VideoAgeRecommendationAdapter,
  ) {}

  async processMetadataAndModeration(video: Video) {
    const [summary, transcript, ageRecommendation] = await Promise.all([
      this.videoSummaryGenerator.generateSummary(video.url),
      this.videoTranscriptGenerator.generateTranscript(video.url),
      this.videoAgeRecommendation.getAgeRecommendation(video.url),
    ]);

    video.metadata = new VideoMetadata({
      autoGeneratedDescription: summary,
      transcript: transcript,
      ageRating: ageRecommendation?.ageRating,
      ageRatingExplanation: ageRecommendation?.explanation,
      ageRatingCategories: ageRecommendation?.categories,
    });

    // TODO: remove this
    video.duration = 10;
  }
}
